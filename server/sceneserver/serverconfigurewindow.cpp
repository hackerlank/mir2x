// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "serverconfigurewindow.hpp"

void ServerConfigureWindow::cb_fileopen_i(Fl_Button*, void*) {
  {
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Working Map File...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\', '/');

                m_MapFullName->value(szPath.c_str());
            }
    }
};
}
void ServerConfigureWindow::cb_fileopen(Fl_Button* o, void* v) {
  ((ServerConfigureWindow*)(o->parent()->user_data()))->cb_fileopen_i(o,v);
}

ServerConfigureWindow::ServerConfigureWindow() {
  { m_Window = new Fl_Double_Window(502, 266, "ConfigureWindow");
    m_Window->labelfont(4);
    m_Window->user_data((void*)(this));
    { m_MaxPlayerCount = new Fl_Value_Input(172, 96, 60, 24, "Maximal Player: ");
      m_MaxPlayerCount->labelfont(4);
      m_MaxPlayerCount->minimum(1024);
      m_MaxPlayerCount->maximum(10000);
      m_MaxPlayerCount->value(5000);
      m_MaxPlayerCount->textfont(4);
    } // Fl_Value_Input* m_MaxPlayerCount
    { m_MapFullName = new Fl_Input(172, 20, 273, 24, "Working Map: ");
      m_MapFullName->labelfont(4);
      m_MapFullName->textfont(4);
    } // Fl_Input* m_MapFullName
    { m_EquipRate = new Fl_Value_Input(172, 171, 60, 24, "Equipment Rate: ");
      m_EquipRate->labelfont(4);
      m_EquipRate->minimum(1024);
      m_EquipRate->maximum(10000);
      m_EquipRate->value(1.5);
      m_EquipRate->textfont(4);
    } // Fl_Value_Input* m_EquipRate
    { m_ExpRate = new Fl_Value_Input(172, 133, 60, 24, "Exprience Rate: ");
      m_ExpRate->labelfont(4);
      m_ExpRate->minimum(1024);
      m_ExpRate->maximum(10000);
      m_ExpRate->value(1.5);
      m_ExpRate->textfont(4);
    } // Fl_Value_Input* m_ExpRate
    { m_GoldRate = new Fl_Value_Input(172, 209, 60, 24, "Gold Rate: ");
      m_GoldRate->labelfont(4);
      m_GoldRate->minimum(1024);
      m_GoldRate->maximum(10000);
      m_GoldRate->value(1.5);
      m_GoldRate->textfont(4);
    } // Fl_Value_Input* m_GoldRate
    { Fl_Button* o = new Fl_Button(451, 20, 26, 23, "@fileopen");
      o->callback((Fl_Callback*)cb_fileopen);
    } // Fl_Button* o
    { m_MaxMonsterCount = new Fl_Value_Input(172, 58, 60, 24, "Maximal Monster: ");
      m_MaxMonsterCount->labelfont(4);
      m_MaxMonsterCount->minimum(1024);
      m_MaxMonsterCount->maximum(10000);
      m_MaxMonsterCount->value(5000);
      m_MaxMonsterCount->textfont(4);
    } // Fl_Value_Input* m_MaxMonsterCount
    m_Window->end();
  } // Fl_Double_Window* m_Window
}

void ServerConfigureWindow::ShowAll() {
  {
      m_Window->show();
  }
}

const char * ServerConfigureWindow::MapFullName() {
  {
      // printf("%d\n", std::lround(m_VIPort1->value()));
  
      return m_MapFullName->value();
  }
}

int ServerConfigureWindow::MaxPlayerCount() {
  {
      return std::lround(m_MaxPlayerCount->value());
  }
}

double ServerConfigureWindow::ExpRate() {
  {
      return (std::max)(0.00, (double)(m_ExpRate->value()));
  }
}

double ServerConfigureWindow::EquipRate() {
  {
      return (std::max)(0.00, (double)(m_EquipRate->value()));
  }
}

double ServerConfigureWindow::GoldRate() {
  {
      return (std::max)(0.00, (double)(m_GoldRate->value()));
  }
}

int ServerConfigureWindow::MaxMonsterCount() {
  {
      return std::lround(m_MaxMonsterCount->value());
  }
}
