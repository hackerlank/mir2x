# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cmath>} {public global
} 

decl {\#include <algorithm>} {public global
} 

class ServerConfigureWindow {open
} {
  Function {ServerConfigureWindow()} {open
  } {
    Fl_Window m_Window {
      label ConfigureWindow open selected
      xywh {225 224 502 266} type Double labelfont 4 visible
    } {
      Fl_Value_Input m_MaxPlayerCount {
        label {Maximal Player: }
        xywh {172 96 60 24} labelfont 4 minimum 1024 maximum 10000 value 5000 textfont 4
      }
      Fl_Input m_MapFullName {
        label {Working Map: }
        xywh {172 20 273 24} labelfont 4 textfont 4
      }
      Fl_Value_Input m_EquipRate {
        label {Equipment Rate: }
        xywh {172 171 60 24} labelfont 4 minimum 1024 maximum 10000 value 1.5 textfont 4
      }
      Fl_Value_Input m_ExpRate {
        label {Exprience Rate: }
        xywh {172 133 60 24} labelfont 4 minimum 1024 maximum 10000 value 1.5 textfont 4
      }
      Fl_Value_Input m_GoldRate {
        label {Gold Rate: }
        xywh {172 209 60 24} labelfont 4 minimum 1024 maximum 10000 value 1.5 textfont 4
      }
      Fl_Button {} {
        label {@fileopen}
        callback {{
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set Working Map File...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert("%s", stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szPath = stFileChooser.filename();
                std::replace(szPath.begin(), szPath.end(), '\\\\', '/');

                m_MapFullName->value(szPath.c_str());
            }
    }
}}
        xywh {451 20 26 23}
        code0 {\#include <string>}
        code1 {\#include <FL/Fl_Native_File_Chooser.H>}
        code2 {\#include <FL/fl_ask.H>}
      }
      Fl_Value_Input m_MaxMonsterCount {
        label {Maximal Monster: }
        xywh {172 58 60 24} labelfont 4 minimum 1024 maximum 10000 value 5000 textfont 4
      }
    }
  }
  Function {ShowAll()} {open
  } {
    code {{
    m_Window->show();
}} {}
  }
  Function {MapFullName()} {open return_type {const char *}
  } {
    code {{
    // printf("%d\\n", std::lround(m_VIPort1->value()));

    return m_MapFullName->value();
}} {}
  }
  Function {MaxPlayerCount()} {open return_type int
  } {
    code {{
    return std::lround(m_MaxPlayerCount->value());
}} {}
  }
  Function {ExpRate()} {open return_type double
  } {
    code {{
    return (std::max)(0.00, (double)(m_ExpRate->value()));
}} {}
  }
  Function {EquipRate()} {open return_type double
  } {
    code {{
    return (std::max)(0.00, (double)(m_EquipRate->value()));
}} {}
  }
  Function {GoldRate()} {open return_type double
  } {
    code {{
    return (std::max)(0.00, (double)(m_GoldRate->value()));
}} {}
  }
  Function {MaxMonsterCount()} {open return_type int
  } {
    code {{
    return std::lround(m_MaxMonsterCount->value());
}} {}
  }
} 
