# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cstdint>} {private local
} 

decl {\#include <ctime>} {private local
} 

decl {\#include <vector>} {public local
} 

decl {\#include <array>} {private local
} 

decl {\#include <map>} {private local
} 

decl {\#include <string>} {private local
} 

decl {\#include <cstring>} {private local
} 

decl {\#include "filesys.hpp"} {private local
} 

decl {\#include "supwarning.hpp"} {private local
} 

decl {\#include "mapinfowindow.hpp"} {private local
} 

decl {\#include "imagedb.hpp"} {private local
} 

decl {\#include "imagecache.hpp"} {private local
} 

decl {\#include "editormap.hpp"} {private local
} 

decl {\#include "hexstring.hpp"} {private local
} 

decl {\#include <FL/fl_draw.H>} {public local
} 

decl {\#include <FL/Fl_Shared_Image.H>} {public local
} 

class MainWindow {open
} {
  decl {std::string m_WilFilePathName} {private local
  }
  Function {MainWindow()} {open
  } {
    Fl_Window m_Window {
      callback {{
	// do nothing
}} open
      xywh {1648 201 985 665} type Double resizable visible
    } {
      Fl_Box m_MonitorDrawArea {selected
        xywh {0 20 965 627} resizable
        code0 {\#include "monitordrawarea.hpp"}
        class MonitorDrawArea
      }
      Fl_Menu_Bar m_MenuBar {open
        xywh {0 0 993 20} box THIN_UP_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label Monitor open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label Load
            xywh {0 0 34 20}
          }
          MenuItem {} {
            label Configure
            xywh {10 10 34 20} divider
          }
          MenuItem {} {
            label {Quit            }
            callback {{
	m_Window->hide();
}}
            xywh {0 0 30 20} shortcut 0x40071 labelfont 4
          }
        }
        Submenu {} {
          label Select open
          xywh {10 10 62 20} labelfont 4
        } {
          MenuItem m_MenuItemLightLayer {
            label Ground
            xywh {10 10 30 20} type Toggle value 1 labelfont 4
          }
          MenuItem m_MenuItemBaseTileLayer {
            label Monster
            xywh {20 20 30 20} type Toggle value 1 labelfont 4
          }
          MenuItem m_MenuItemGroundObjectLayer {
            label Player
            xywh {20 20 30 20} type Toggle value 1 labelfont 4 divider
          }
          MenuItem m_MenuItemClearBackground {
            label {Clear Background      }
            xywh {40 40 30 20} type Toggle value 1 labelfont 4
          }
        }
        Submenu {} {
          label About
          xywh {30 30 62 20} labelfont 4
        } {
          MenuItem {} {
            label {About Me           }
            callback {extern AboutWindow *g_AboutWindow;
g_AboutWindow->ShowAll();}
            xywh {30 30 30 20} labelfont 4
            code0 {\#include "aboutwindow.hpp"}
          }
        }
      }
      Fl_Scrollbar m_VSBar {
        callback {auto pWidget = ((Fl_Valuator *)(m_VSBar)); 
auto fValue  = pWidget->value();

extern EditorMap g_EditorMap;
if(g_EditorMap.Valid()){
	int nValidYOffset = g_EditorMap.H() * 32 - m_DrawArea->h();
	nValidYOffset = (std::max)(0, nValidYOffset);
	int nYOffset = (int)(nValidYOffset * fValue * 1.0);
    	m_DrawArea->SetOffset(0, true, nYOffset, false);
	m_Window->redraw();
}}
        xywh {965 20 20 647} step 0.001
        code0 {\#include "editormap.hpp"}
      }
      Fl_Scrollbar m_SBar {
        callback {auto pWidget = ((Fl_Valuator *)(m_SBar)); 
auto fValue  = pWidget->value();

extern EditorMap g_EditorMap;
if(g_EditorMap.Valid()){
	int nValidXOffset = g_EditorMap.W() * 48 - m_DrawArea->w();
	nValidXOffset = (std::max)(0, nValidXOffset);
	int nXOffset = (int)(nValidXOffset * fValue * 1.0);
    	m_DrawArea->SetOffset(nXOffset, false, 0, true);
	m_Window->redraw();
}}
        xywh {0 647 965 20} type Horizontal labelfont 4 step 0.001
        code0 {\#include "editormap.hpp"}
      }
    }
    code {{
    if(!FileExist("./cache")){
        MakeDir("./cache");
    }
}} {}
  }
  Function {ShowAll()} {return_type void
  } {
    code {{
	m_Window->show();
}} {}
  }
  Function {RedrawAll()} {return_type void
  } {
    code {{
	m_Window->redraw();
}} {}
  }
  Function {LoadMir2MapImage()} {return_type void
  } {
    code {{
    extern std::string g_WilFilePathName;
    extern ImageDB     g_ImageDB;
    g_ImageDB.LoadDB(g_WilFilePathName.c_str());
}} {}
  }
  Function {LoadMir2Map()} {return_type void
  } {
    code {{
    extern EditorMap g_EditorMap;

    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Select .map file");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char matchedFileNames[] =
        "MAP\\t*.map\\n"
        ;

    fileChooser.filter(matchedFileNames);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert(fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
                if(!g_EditorMap.LoadMir2Map(fileChooser.filename())){
                    fl_alert("Load mir2 map %s failed...", fileChooser.filename());
                }
                
                AfterLoadMir2Map();

                Fl::remove_timeout(UpdateFrame);
                Fl::add_timeout(0.5, UpdateFrame);
            }
            break;
    }
    m_DrawArea->redraw();
}} {}
  }
  Function {AfterLoadMir2Map()} {return_type void
  } {
    code {{
	// previously this function is to set global variables after loading
	// now seems I need to abondon it
	extern MapInfoWindow *g_MapInfoWindow;
	extern EditorMap      g_EditorMap;
	g_MapInfoWindow->Output(g_EditorMap.MapInfo().c_str());
	g_MapInfoWindow->ShowAll();

    m_DrawArea->SetOffset(0, false, 0, false);
    RedrawAll();
}} {}
  }
  Function {SetWorkingPathName()} {return_type void
  } {
    code {{
    // set the work folder
    // default CACHE system locates inside
    extern std::string g_WorkingPathName;
    Fl_Native_File_Chooser stFileChooser;
    
    stFileChooser.title("Set Working Folder...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert(stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                g_WorkingPathName = stFileChooser.filename();
                std::replace(g_WorkingPathName.begin(), g_WorkingPathName.end(), '\\\\', '/');
                while(!g_WorkingPathName.empty() && g_WorkingPathName.back() == '/'){
                    g_WorkingPathName.pop_back();
                }
                MakeWorkingFolder();
            }
            break;
    }
}} {}
  }
  Function {SetWilFilePathName()} {return_type void
  } {
    code {{
    extern std::string g_WilFilePathName;
    Fl_Native_File_Chooser stFileChooser;
    stFileChooser.title("Set *.wil File Path...");
    stFileChooser.options(Fl_Native_File_Chooser::NO_OPTIONS);
    stFileChooser.type(Fl_Native_File_Chooser::BROWSE_DIRECTORY);

    stFileChooser.directory(".");

    switch(stFileChooser.show()){
        case -1:
            {
                fl_alert(stFileChooser.errmsg());
                break;
            }
        case 1:
            {
                break;
            }
        default:
            {
                std::string szOldWilFilePathName = g_WilFilePathName;
                g_WilFilePathName = stFileChooser.filename();
                std::replace(g_WilFilePathName.begin(), g_WilFilePathName.end(), '\\\\', '/');
                if(szOldWilFilePathName != g_WilFilePathName){
                    LoadMir2MapImage();
                    break;
                }
            }
    }
}} {}
  }
  Function {UpdateScrollBar(double fXP, double fYP)} {return_type void
  } {
    code {{
	auto pWidgetX = ((Fl_Valuator *)(m_SBar));
	auto pWidgetY = ((Fl_Valuator *)(m_VSBar));

	fXP = (std::min)(1.0, (std::max)(0.0, fXP));
	fYP = (std::min)(1.0, (std::max)(0.0, fYP));

	pWidgetX->value(pWidgetX->round(fXP));
	pWidgetY->value(pWidgetY->round(fYP));
}} {}
  }
  Function {UpdateFrame(void *)} {return_type {static void}
  } {
    code {{
    extern EditorMap g_EditorMap;
    if(g_EditorMap.Valid()){
        g_EditorMap.UpdateFrame(50);
        extern MainWindow *g_MainWindow;
        g_MainWindow->RedrawAll();
    }
    Fl::repeat_timeout(0.5, UpdateFrame);
}} {}
  }
  Function {ShowBaseTileLine()} {return_type bool
  } {
    code {{
	return m_MenuItemBaseTileLine->value();
}} {}
  }
  Function {ShowGroundObjectLine()} {return_type bool
  } {
    code {{
	return m_MenuItemGroundObjectLine->value();
}} {}
  }
  Function {ShowOverGroundObjectLine()} {return_type bool
  } {
    code {{
	return m_MenuItemOverGroundObjectLine->value();
}} {}
  }
  Function {ShowGridLine()} {return_type bool
  } {
    code {{
	return m_MenuItemGridLine->value();
}} {}
  }
  Function {ShowAttributeGridLine()} {return_type bool
  } {
    code {{
	return m_MenuItemAttributeGridLine->value();
}} {}
  }
  Function {ShowLightLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemLightLayer->value();
}} {}
  }
  Function {ShowBaseTileLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemBaseTileLayer->value();
}} {}
  }
  Function {ShowGroundObjectLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemGroundObjectLayer->value();
}} {}
  }
  Function {ShowOverGroundObjectLayer()} {return_type bool
  } {
    code {{
	return m_MenuItemOverGroundObjectLayer->value();
}} {}
  }
  Function {EnableEdit()} {return_type bool
  } {
    code {{
	return m_MenuItemEnableEdit->value();
}} {}
  }
  Function {EnableSelect()} {return_type bool
  } {
    code {{
	return m_MenuItemEnableSelect->value();
}} {}
  }
  Function {SelectByAttribute()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectByAttribute->value();
}} {}
  }
  Function {SelectByRhombus()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectByRhombus->value();
}} {}
  }
  Function {SelectByRectangle()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectByRectangle->value();
}} {}
  }
  Function {SelectBySingle()} {return_type bool
  } {
    code {{
	return m_MenuItemSelectBySingle->value();
}} {}
  }
  Function {MakeWorkingFolder()} {return_type void
  } {
    code {{
    extern std::string g_WorkingPathName;
    if(g_WorkingPathName == "" || (g_WorkingPathName.size() > 0 && g_WorkingPathName[0] == '.')){
        time_t     stRawTime;
        struct tm *stTimeInfo;
        char       szBuffer[64];

        time(&stRawTime);
        stTimeInfo = localtime(&stRawTime);
        strftime(szBuffer, 64, "%Y%m%d%H%M%S", stTimeInfo);
        g_WorkingPathName = std::string("./") + szBuffer;
    }

    RemoveDir(g_WorkingPathName.c_str());
    MakeDir(g_WorkingPathName.c_str());

    std::string szTmpPath = g_WorkingPathName;
    if(szTmpPath.back() != '/'){
        szTmpPath += "/";
    }
    szTmpPath += "IMG";
    MakeDir(szTmpPath.c_str());
}} {}
  }
  Function {SaveMap()} {return_type void
  } {
    code {{
	extern EditorMap g_EditorMap;
	if(g_EditorMap.Valid()){
		extern std::string g_WorkingPathName;
    		std::string szTmpFileName = g_WorkingPathName;
	
		if(szTmpFileName.back() == '/'){
        		szTmpFileName += "DESC.BIN";
    		}else{
        		szTmpFileName += "/DESC.BIN";
    		}
    		g_EditorMap.Save(szTmpFileName.c_str());
    		fl_message("Map file saved in mir2x format successfully!");
    		
	}else{
		fl_alert("Currently no operating map!");
	}
}} {}
  }
  Function {ClearBackground()} {return_type bool
  } {
    code {{
    return m_MenuItemClearBackground->value();
}} {}
  }
  Function {Deselect()} {return_type bool
  } {
    code {{
    return m_MenuItemDeselect->value();
}} {}
  }
  Function {Reversed()} {return_type bool
  } {
    code {{
    return m_MenuItemReversed->value();
}} {}
  }
} 
