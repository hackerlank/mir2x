# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cstdint>} {public global
} 

decl {\#include <algorithm>} {public global
} 

decl {\#include "animationdb.hpp"} {private local
} 

class AnimationSelectWindow {open
} {
  decl {uint32_t m_Frame;} {private local
  }
  Function {AnimationSelectWindow()} {open
  } {
    code {m_Frame = -1; // to pointer to first frame
              // this variable will be updated by time callback functioin
              // we don't have m_Action and m_Direction since it can be read from the browser->selected(i)} {}
    Fl_Window m_Window {open
      xywh {2159 227 650 500} type Double non_modal visible
    } {
      Fl_Browser m_BrowserAnimation {
        callback {{
    // if(!Fl::event_clicks()){
    //     return;
    // }
    
    // every time when we get a click, we clear the action & direction
    // even if this click is null
    m_BrowserAction->clear();
    m_BrowserDirection->clear();
    
    uint32_t nMonsterID = MonsterID();
    if(nMonsterID){
        extern AnimationDB g_AnimationDB;
        for(uint32_t nAction = 0; nAction < 16; ++nAction){
            if(g_AnimationDB.RetrieveAnimation(nMonsterID).ActionValid(nAction)){
                char szAction[64];
                std::sprintf(szAction, "Action: %02d", nAction);
                m_BrowserAction->add(szAction, (void *)(uintptr_t)(nAction));
            }
        }   
    }
        
    RedrawAll();
}}
        xywh {0 0 300 500} type Hold labelfont 4 textfont 4
      }
      Fl_Box m_AnimationPreviewArea {selected
        xywh {300 0 350 280} box UP_BOX labelfont 4
        code0 {\#include "animationpreviewarea.hpp"}
        class AnimationPreviewArea
      }
      Fl_Browser m_BrowserAction {
        callback {{
    // if(!Fl::event_clicks()){
    //     return;
    // }
    m_BrowserDirection->clear();
    
    uint32_t nMonsterID = MonsterID();
    if(nMonsterID){
        // we do have a valid monster id
        int nAction0 = Action();
        if(nAction0 >= 0){
            uint32_t nAction = (uint32_t)(nAction0);
            for(uint32_t nDirection = 0; nDirection < 8; ++nDirection){
                extern AnimationDB g_AnimationDB;
                if(g_AnimationDB.RetrieveAnimation(nMonsterID).DirectionValid(nAction, nDirection)){
                    char szDirection[64];
                    std::sprintf(szDirection, "Direction: %d", nDirection);
                    m_BrowserDirection->add(szDirection, (void *)(uintptr_t)(nDirection));
                }
            }
        }
    }
    
    RedrawAll();
}}
        xywh {300 300 350 100} type Hold labelfont 4 textfont 4
      }
      Fl_Browser m_BrowserDirection {
        callback {{
    Fl::remove_timeout(TimeoutCallback);
    m_Frame = -1;
    
    if(MonsterID() && Action() >= 0 && Direction() >= 0){
        extern AnimationDB g_AnimationDB;
        auto &rstRecord = g_AnimationDB.RetrieveAnimation(MonsterID());
        if(rstRecord.Valid() && rstRecord.DirectionValid((uint32_t)(Action()), (uint32_t)(Direction()))){
            // ok we have a valid animation, reset it's frame index
            m_Frame = 0;
            Fl::add_timeout(0.2, TimeoutCallback, nullptr);
        }
    }
    
    RedrawAll();
}}
        xywh {300 400 350 100} type Hold labelfont 4 textfont 4
      }
      Fl_Slider m_SliderR {
        label R
        xywh {300 280 350 20} type Horizontal labelfont 4 align 0 maximum 40 step 1 slider_size 0.1
      }
    }
  }
  Function {Load()} {return_type void
  } {
    code {{
    ClearAll();
    
    extern AnimationDB g_AnimationDB;
    size_t nSize = g_AnimationDB.Size();
    
    for(size_t nVID = 0; nVID < nSize; ++nVID){
        char szMonsterID[32];
        std::sprintf(szMonsterID, "Monster ID: %04d", g_AnimationDB.Get(nVID).MonsterID());
        
        m_BrowserAnimation->add(szMonsterID, (void *)(uintptr_t)(g_AnimationDB.Get(nVID).MonsterID()));
    }
}} {}
  }
  Function {HideAll()} {return_type void
  } {
    code {{
    m_Window->hide();
}} {}
  }
  Function {ClearAll()} {return_type void
  } {
    code {{
    m_BrowserAnimation->clear();
    m_BrowserAction->clear();
    m_BrowserDirection->clear();
}} {}
  }
  Function {ShowAll()} {return_type void
  } {
    code {{
    m_Window->show();
}} {}
  }
  Function {RedrawAll()} {return_type void
  } {
    code {{
    m_Window->redraw();
}} {}
  }
  Function {MonsterID()} {return_type uint32_t
  } {
    code {{
    uint32_t nMonsterID = 0;
    
    for(int i = 1; i <= m_BrowserAnimation->size(); ++i){
        if(m_BrowserAnimation->selected(i)){
            nMonsterID = (uint32_t)(uintptr_t)m_BrowserAnimation->data(i);
        }
    }
    
    return nMonsterID;
}} {}
  }
  Function {R()} {return_type int
  } {
    code {{
    if(!MonsterID()){ return -1; }
    return (int)(std::lround(m_SliderR->value()));
}} {}
  }
  Function {Action()} {return_type int
  } {
    code {{
    if(!MonsterID()){ return -1; }
    
    // we do have a valid monster id
    int nSelectedActionIndex = 0;
    for(int i = 1; i <= m_BrowserAction->size(); ++i){
        if(m_BrowserAction->selected(i)){
            nSelectedActionIndex = i;
            break;
        }
    }
     
    // we do select an action
    if(nSelectedActionIndex){
        return (int)(intptr_t)m_BrowserAction->data(nSelectedActionIndex);
    }
     
    return -1;
}} {}
  }
  Function {Direction()} {return_type int
  } {
    code {{
    if(!MonsterID()){ return -1; }
    if(Action() < 0){ return -1; }
    
    // we do have a valid monster id
    int nSelectedDirectionIndex = 0;
    for(int i = 1; i <= m_BrowserDirection->size(); ++i){
        if(m_BrowserDirection->selected(i)){
            nSelectedDirectionIndex = i;
            break;
        }
    }
     
    // we do select an action
    if(nSelectedDirectionIndex){
        return (int)(intptr_t)m_BrowserDirection->data(nSelectedDirectionIndex);
    }
     
    return -1;
}} {}
  }
  Function {Frame()} {return_type int
  } {
    code {{
    return m_Frame;
}} {}
  }
  Function {TimeoutCallback(void *)} {return_type {static void}
  } {
    code {{
    extern AnimationSelectWindow *g_AnimationSelectWindow;
    if(true
        && g_AnimationSelectWindow->MonsterID()
        && g_AnimationSelectWindow->Action() >= 0
        && g_AnimationSelectWindow->Direction() >= 0){
        
        // ok currently we have a valid choice
        g_AnimationSelectWindow->UpdateFrame();
        Fl::repeat_timeout(0.2, TimeoutCallback, nullptr);
    }else{
        Fl::remove_timeout(TimeoutCallback);
    }

    g_AnimationSelectWindow->RedrawAll();
}} {}
  }
  Function {UpdateFrame()} {return_type void
  } {
    code {{
    if(MonsterID() && Action() >= 0 && Direction() >= 0){
        uint32_t nMonsterID = MonsterID();
        uint32_t nAction = (uint32_t)(Action());
        uint32_t nDirection = (uint32_t)(Direction());

        extern AnimationDB g_AnimationDB;
        auto &rstRecord = g_AnimationDB.RetrieveAnimation(nMonsterID);
        if(rstRecord.Valid() && rstRecord.DirectionValid(nAction, nDirection)){
            // we assume the frame is contingous, then if one frame is not ok, we just reset it to 0
            // this will also handle if current m_Frame is -1
            if(rstRecord.FrameValid(nAction, nDirection, m_Frame + 1, true) && rstRecord.FrameValid(nAction, nDirection, m_Frame + 1, false)){
                m_Frame = m_Frame + 1;
            }else{
                m_Frame = 0;
            }

            // done here
            return;
        }
    }

    // otherwise we set a error flag
    m_Frame = -1;
}} {}
  }
} 
