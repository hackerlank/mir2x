# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
use_FL_COMMAND 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <string>} {private local
} 

decl {\#include "filesys.hpp"} {private local
} 

decl {\#include <algorithm>} {private local
} 

decl {\#include <FL/fl_ask.H>} {private local
} 

decl {\#include "animationpreviewwindow.hpp"} {private local
} 

class ValidAnimationWindow {open
} {
  decl {int m_AnimationCount;} {private local
  }
  decl {int m_FileIndex;} {private local
  }
  Function {ValidAnimationWindow()} {open
  } {
    code {m_FileIndex = 0;} {}
    code {m_AnimationCount = 0;} {}
    Fl_Window m_Window {
      callback {{
    extern AnimationPreviewWindow *g_AnimationPreviewWindow;
    delete g_AnimationPreviewWindow; g_AnimationPreviewWindow = nullptr;
    m_Window->hide();
    extern ValidWilFileWindow *g_ValidWilFileWindow;
    g_ValidWilFileWindow->ShowAll();
}} open
      private xywh {1254 77 482 401} type Double labelfont 4 resizable
      code0 {\#include "validwilfilewindow.hpp"}
      code1 {\#include "animationpreviewwindow.hpp"} visible
    } {
      Fl_Browser m_ValidAnimationBrowser {
        callback {{
    if(!Fl::event_clicks()){
        return;
    }
    
    for(int i = 1; i <= m_ValidAnimationBrowser->size(); ++i){
        if(m_ValidAnimationBrowser->selected(i)){
            extern AnimationPreviewWindow *g_AnimationPreviewWindow;
            delete g_AnimationPreviewWindow;
            g_AnimationPreviewWindow = new AnimationPreviewWindow(m_FileIndex, (int)(intptr_t)m_ValidAnimationBrowser->data(i));
            g_AnimationPreviewWindow->ShowAll();
            return;
        }
    }
}}
        private xywh {0 0 480 400} type Hold labelfont 4 textfont 4 resizable
        code0 {\#include <cstdio>}
        code1 {\#include "animationpreviewwindow.hpp"}
        code2 {\#include <FL/Fl.H>}
      }
    }
  }
  Function {~ValidAnimationWindow()} {} {
    code {delete m_Window;} {}
  }
  Function {ShowAll()} {return_type void
  } {
    code {{
	m_Window->show();
}} {}
  }
  Function {CheckValidAnimation(int nMaxIndex)} {open return_type void
  } {
    code {{
    // make the compiler happy
    nMaxIndex = nMaxIndex;
    
    m_ValidAnimationBrowser->clear();
    
    // m_AnimationCount = nMaxIndex / 1000 + 1;
    m_AnimationCount = 9;
    for(int nSet = 0; nSet < m_AnimationCount; ++nSet){
        for(int nState = 0; nState < 33; ++nState){
            int nStartIndex = nSet * 3000 + 1 + (nState * 80);
            extern WilImagePackage g_WilImagePackage[2];
            extern const char *g_StatusNameList[];
            if(true
                    && g_WilImagePackage[0].SetIndex(nStartIndex)
                    && g_WilImagePackage[0].CurrentImageValid()
              ){
                char szInfo[512];
                std::sprintf(szInfo,
                        "Set/State: (%d:%02d)        %s", nSet, nState, g_StatusNameList[nState]);
                m_ValidAnimationBrowser->add(szInfo, (void *)(intptr_t)(nStartIndex));
            }else{
                char szInfo[512];
                std::sprintf(szInfo,
                        "Set/State: (%d:%02d) (Lost) %s", nSet, nState, g_StatusNameList[nState]);
                m_ValidAnimationBrowser->add(szInfo, (void *)(intptr_t)(nStartIndex));
            }
        }
    }
}} {selected
    }
  }
  Function {SetFileIndex(int nFileIndex)} {return_type void
  } {
    code {{
    m_FileIndex = nFileIndex;
}} {}
  }
  Function {AnimationCount()} {return_type int
  } {
    code {{
    return m_AnimationCount;
}} {}
  }
} 
