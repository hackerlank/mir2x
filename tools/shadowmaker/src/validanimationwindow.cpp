// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "validanimationwindow.hpp"
#include <string>
#include "misc.hpp"
#include <algorithm>
#include <FL/fl_ask.H>
#include "animationpreviewwindow.hpp"

void ValidAnimationWindow::cb_m_Window_i(Fl_Double_Window*, void*) {
  {
    extern AnimationPreviewWindow *g_AnimationPreviewWindow;
    delete g_AnimationPreviewWindow; g_AnimationPreviewWindow = nullptr;
    m_Window->hide();
    extern ValidWilFileWindow *g_ValidWilFileWindow;
    g_ValidWilFileWindow->ShowAll();
};
}
void ValidAnimationWindow::cb_m_Window(Fl_Double_Window* o, void* v) {
  ((ValidAnimationWindow*)(o->user_data()))->cb_m_Window_i(o,v);
}

void ValidAnimationWindow::cb_m_ValidAnimationBrowser_i(Fl_Browser*, void*) {
  {
    if(!Fl::event_clicks()){
        return;
    }
    
    for(int i = 1; i <= m_ValidAnimationBrowser->size(); ++i){
        if(m_ValidAnimationBrowser->selected(i)){
            extern AnimationPreviewWindow *g_AnimationPreviewWindow;
            delete g_AnimationPreviewWindow;
            g_AnimationPreviewWindow = new AnimationPreviewWindow(m_FileIndex, (int)m_ValidAnimationBrowser->data(i));
            g_AnimationPreviewWindow->ShowAll();
            return;
        }
    }
};
}
void ValidAnimationWindow::cb_m_ValidAnimationBrowser(Fl_Browser* o, void* v) {
  ((ValidAnimationWindow*)(o->parent()->user_data()))->cb_m_ValidAnimationBrowser_i(o,v);
}

ValidAnimationWindow::ValidAnimationWindow() {
  m_FileIndex = 0;
  m_AnimationCount = 0;
  { m_Window = new Fl_Double_Window(482, 401);
    m_Window->labelfont(4);
    m_Window->callback((Fl_Callback*)cb_m_Window, (void*)(this));
    { m_ValidAnimationBrowser = new Fl_Browser(0, 0, 480, 400);
      m_ValidAnimationBrowser->type(2);
      m_ValidAnimationBrowser->labelfont(4);
      m_ValidAnimationBrowser->textfont(4);
      m_ValidAnimationBrowser->callback((Fl_Callback*)cb_m_ValidAnimationBrowser);
      Fl_Group::current()->resizable(m_ValidAnimationBrowser);
    } // Fl_Browser* m_ValidAnimationBrowser
    m_Window->end();
  } // Fl_Double_Window* m_Window
}

ValidAnimationWindow::~ValidAnimationWindow() {
  delete m_Window;
}

void ValidAnimationWindow::ShowAll() {
  {
  	m_Window->show();
  }
}

void ValidAnimationWindow::CheckValidAnimation(int nMaxIndex) {
  {
      m_ValidAnimationBrowser->clear();
      
      // m_AnimationCount = nMaxIndex / 1000 + 1;
      m_AnimationCount = 9;
      for(int nSet = 0; nSet < m_AnimationCount; ++nSet){
          for(int nState = 0; nState < 33; ++nState){
              int nStartIndex = nSet * 3000 + 1 + (nState * 80);
              extern WilImagePackage g_WilImagePackage[2];
              extern const char *g_StatusNameList[];
              if(true
                      && g_WilImagePackage[0].SetIndex(nStartIndex)
                      && g_WilImagePackage[0].CurrentImageValid()
                ){
                  char szInfo[512];
                  std::sprintf(szInfo,
                          "Set/State: (%d:%02d)        %s", nSet, nState, g_StatusNameList[nState]);
                  m_ValidAnimationBrowser->add(szInfo, (void *)(nStartIndex));
              }else{
                  char szInfo[512];
                  std::sprintf(szInfo,
                          "Set/State: (%d:%02d) (Lost) %s", nSet, nState, g_StatusNameList[nState]);
                  m_ValidAnimationBrowser->add(szInfo, (void *)(nStartIndex));
              }
          }
      }
  }
}

void ValidAnimationWindow::SetFileIndex(int nFileIndex) {
  {
      m_FileIndex = nFileIndex;
  }
}

int ValidAnimationWindow::AnimationCount() {
  {
      return m_AnimationCount;
  }
}
