// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "progressbarwindow.hpp"
#include <string>
#include <algorithm>

void ProgressBarWindow::cb_m_Window_i(Fl_Double_Window*, void*) {
  // do nothing;
}
void ProgressBarWindow::cb_m_Window(Fl_Double_Window* o, void* v) {
  ((ProgressBarWindow*)(o->user_data()))->cb_m_Window_i(o,v);
}

ProgressBarWindow::ProgressBarWindow() {
  { m_Window = new Fl_Double_Window(254, 25);
    m_Window->labelfont(4);
    m_Window->callback((Fl_Callback*)cb_m_Window, (void*)(this));
    { m_ProgressBar = new Fl_Progress(0, 0, 255, 25, "label");
      m_ProgressBar->selection_color((Fl_Color)177);
      m_ProgressBar->labelfont(4);
    } // Fl_Progress* m_ProgressBar
    m_Window->clear_border();
    m_Window->end();
  } // Fl_Double_Window* m_Window
}

void ProgressBarWindow::ShowAll() {
  m_Window->show();
}

void ProgressBarWindow::Redraw() {
  m_Window->redraw();
}

void ProgressBarWindow::SetValue(int nValue) {
  nValue = (std::min)(nValue, 100);
  nValue = (std::max)(nValue, 0);
  
  std::string szLabel;
  szLabel  = "Progress: ";
  szLabel += std::to_string(nValue);
  szLabel += "%";
  m_ProgressBar->value(nValue * 1.0);
  m_ProgressBar->copy_label(szLabel.c_str());
}

void ProgressBarWindow::HideAll() {
  m_Window->hide();
}
