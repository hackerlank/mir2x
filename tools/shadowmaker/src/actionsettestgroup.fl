# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cstdint>} {public local
} 

decl {\#include <string>} {public local
} 

decl {\#include "mainwindow.hpp"} {private global
} 

decl {\#include "animationset.hpp"} {public local
} 

widget_class ActionSetTestGroup {open selected
  xywh {348 138 261 439} type Double visible position_relative
} {
  Fl_Choice m_TestStatus1 {
    label {1:} open
    xywh {34 11 198 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestDirection1 {open
    xywh {35 40 133 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestRoundCount1 {open
    xywh {182 40 50 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestStatus2 {
    label {2:} open
    xywh {35 68 198 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestDirection2 {open
    xywh {35 101 133 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestRoundCount2 {open
    xywh {183 101 50 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestStatus3 {
    label {3:} open
    xywh {35 130 198 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestDirection3 {open
    xywh {35 160 133 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestRoundCount3 {open
    xywh {183 160 50 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestStatus4 {
    label {4:} open
    xywh {35 190 198 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestDirection4 {open
    xywh {35 220 133 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestRoundCount4 {open
    xywh {183 220 50 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestStatus5 {
    label {5:} open
    xywh {35 250 198 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestDirection5 {open
    xywh {35 280 133 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Choice m_TestRoundCount5 {open
    xywh {183 280 50 25} down_box BORDER_BOX labelfont 4 textfont 4
  } {}
  Fl_Button {} {
    label Reset
    xywh {32 315 50 35} labelfont 4
  }
  Fl_Button {} {
    label Start
    callback {{
    StartTest();
}}
    xywh {82 315 50 35} labelfont 4
    code0 {\#include <cstdint>}
  }
  Fl_Button {} {
    label Pause
    xywh {132 315 50 35} labelfont 4
  }
  Fl_Button {} {
    label Stop
    callback {{
    StopTest();
}}
    xywh {182 315 50 35} labelfont 4
  }
  Function {AddValidStatus()} {return_type void
  } {
    code {{
    m_TestStatus1->clear();
    m_TestStatus2->clear();
    m_TestStatus3->clear();
    m_TestStatus4->clear();
    m_TestStatus5->clear();

    m_TestDirection1->clear();
    m_TestDirection2->clear();
    m_TestDirection3->clear();
    m_TestDirection4->clear();
    m_TestDirection5->clear();

    m_TestRoundCount1->clear();
    m_TestRoundCount2->clear();
    m_TestRoundCount3->clear();
    m_TestRoundCount4->clear();
    m_TestRoundCount5->clear();

    // add status
    m_TestStatus1->add("None", 0, StatusItemCallback, (void *)(uintptr_t)((0X00000001 << 8) + (0X000000FF)), 0);
    m_TestStatus2->add("None", 0, StatusItemCallback, (void *)(uintptr_t)((0X00000002 << 8) + (0X000000FF)), 0);
    m_TestStatus3->add("None", 0, StatusItemCallback, (void *)(uintptr_t)((0X00000003 << 8) + (0X000000FF)), 0);
    m_TestStatus4->add("None", 0, StatusItemCallback, (void *)(uintptr_t)((0X00000004 << 8) + (0X000000FF)), 0);
    m_TestStatus5->add("None", 0, StatusItemCallback, (void *)(uintptr_t)((0X00000005 << 8) + (0X000000FF)), 0);

    extern AnimationSet g_AnimationSet;
    for(uint32_t nStatus = 0; nStatus < 100; ++nStatus){
        for(int nDirection = 0; nDirection < 8; ++nDirection){
            if(g_AnimationSet.Valid(nStatus, nDirection)){
                extern const char *g_StatusNameList[];
                m_TestStatus1->add(g_StatusNameList[nStatus], 0, StatusItemCallback, (void *)(uintptr_t)((0X00000001 << 8) + (nStatus & 0X000000FF)), 0);
                m_TestStatus2->add(g_StatusNameList[nStatus], 0, StatusItemCallback, (void *)(uintptr_t)((0X00000002 << 8) + (nStatus & 0X000000FF)), 0);
                m_TestStatus3->add(g_StatusNameList[nStatus], 0, StatusItemCallback, (void *)(uintptr_t)((0X00000003 << 8) + (nStatus & 0X000000FF)), 0);
                m_TestStatus4->add(g_StatusNameList[nStatus], 0, StatusItemCallback, (void *)(uintptr_t)((0X00000004 << 8) + (nStatus & 0X000000FF)), 0);
                m_TestStatus5->add(g_StatusNameList[nStatus], 0, StatusItemCallback, (void *)(uintptr_t)((0X00000005 << 8) + (nStatus & 0X000000FF)), 0);
                break;
            }
        }
    }
    m_TestStatus1->value(0);
    m_TestStatus2->value(0);
    m_TestStatus3->value(0);
    m_TestStatus4->value(0);
    m_TestStatus5->value(0);

    // add direction
    m_TestDirection1->add("None", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestDirection2->add("None", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestDirection3->add("None", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestDirection4->add("None", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestDirection5->add("None", 0, 0, (void *)(uintptr_t)(0), 0);

    m_TestDirection1->value(0);
    m_TestDirection2->value(0);
    m_TestDirection3->value(0);
    m_TestDirection4->value(0);
    m_TestDirection5->value(0);

    // add round count
    
    m_TestRoundCount1->add("0", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestRoundCount2->add("0", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestRoundCount3->add("0", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestRoundCount4->add("0", 0, 0, (void *)(uintptr_t)(0), 0);
    m_TestRoundCount5->add("0", 0, 0, (void *)(uintptr_t)(0), 0);

    m_TestRoundCount1->value(0);
    m_TestRoundCount2->value(0);
    m_TestRoundCount3->value(0);
    m_TestRoundCount4->value(0);
    m_TestRoundCount5->value(0);
    
}} {}
  }
  Function {StatusItemCallback(Fl_Widget * pWidget, void *pData)} {return_type {static void}
  } {
    code {{
    auto pRoot = (ActionSetTestGroup *)(pWidget->parent());
    auto nArg  = (uint32_t)(uintptr_t)pData;
    pRoot->AddValidDirection((0X0000FF00 & nArg) >> 8, 0X000000FF & nArg);
}} {}
  }
  Function {AddValidDirection(int nIndex, int nStatus)} {return_type void
  } {
    code {{
    // printf("%d %d\\n", nIndex, nStatus);
    Fl_Choice *stDirectionChoiceArr[] = {
        m_TestDirection1,
        m_TestDirection2,
        m_TestDirection3,
        m_TestDirection4,
        m_TestDirection5
    };

    Fl_Choice *stRoundCountChoiceArr[] = {
        m_TestRoundCount1,
        m_TestRoundCount2,
        m_TestRoundCount3,
        m_TestRoundCount4,
        m_TestRoundCount5
    };

    stDirectionChoiceArr [nIndex - 1]->clear();
    stRoundCountChoiceArr[nIndex - 1]->clear();
    if(nStatus < 100){
        // at least there is one direction available for this status
        // otherwise this function can't be invoked
        extern AnimationSet g_AnimationSet;
        for(int nDirection = 0; nDirection < 8; ++nDirection){
            if(g_AnimationSet.Valid(nStatus, nDirection)){
                stDirectionChoiceArr[nIndex - 1]->add(
                        (std::string("Direction ") + std::to_string(nDirection)).c_str(), 0, 0, 
                        (void *)(intptr_t)nDirection, 0);
            }
        }
    }

    if(stDirectionChoiceArr[nIndex - 1]->size() == 0){
        stDirectionChoiceArr [nIndex - 1]->add("None", 0, 0, 0, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "0", 0, 0, 0, 0);
    }else{
        stRoundCountChoiceArr[nIndex - 1]->add(   "1", 0, 0, (void *)1, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "2", 0, 0, (void *)2, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "3", 0, 0, (void *)3, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "4", 0, 0, (void *)4, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "5", 0, 0, (void *)5, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "6", 0, 0, (void *)6, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "7", 0, 0, (void *)7, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "8", 0, 0, (void *)8, 0);
        stRoundCountChoiceArr[nIndex - 1]->add(   "9", 0, 0, (void *)9, 0);
    }
    stRoundCountChoiceArr[nIndex - 1]->value(0);
    stRoundCountChoiceArr[nIndex - 1]->textfont(4);
    stDirectionChoiceArr [nIndex - 1]->value(0);
    stDirectionChoiceArr [nIndex - 1]->textfont(4);
}} {}
  }
  Function {GetTestActionSetCode(int nIndex)} {return_type uint32_t
  } {
    code {{
    Fl_Choice *stStatusChoiceArr[] = {
        m_TestStatus1,
        m_TestStatus2,
        m_TestStatus3,
        m_TestStatus4,
        m_TestStatus5,
    };

    Fl_Choice *stDirectionChoiceArr[] = {
        m_TestDirection1,
        m_TestDirection2,
        m_TestDirection3,
        m_TestDirection4,
        m_TestDirection5
    };

    Fl_Choice *stRoundCountChoiceArr[] = {
        m_TestRoundCount1,
        m_TestRoundCount2,
        m_TestRoundCount3,
        m_TestRoundCount4,
        m_TestRoundCount5
    };

    uint32_t nStatus     = 0;
    uint32_t nDirection  = 0;
    uint32_t nRoundCount = 0;

    // nIndex = 1, 2, 3, 4, 5
    
    { // status
        auto pStatusMenu = stStatusChoiceArr[nIndex - 1]->menu();
        auto nSelected   = stStatusChoiceArr[nIndex - 1]->value();
        nStatus = (uint32_t)(uintptr_t)(pStatusMenu[nSelected].user_data());
    }

    { // direction
        auto pDirectionMenu = stDirectionChoiceArr[nIndex - 1]->menu();
        auto nSelected      = stDirectionChoiceArr[nIndex - 1]->value();
        nDirection = (uint32_t)(uintptr_t)(pDirectionMenu[nSelected].user_data());
    }

    { // round count
        auto pRoundCountMenu = stRoundCountChoiceArr[nIndex - 1]->menu();
        auto nSelected       = stRoundCountChoiceArr[nIndex - 1]->value();
        nRoundCount = (uint32_t)(uintptr_t)(pRoundCountMenu[nSelected].user_data());
    }

    return 0
        + ((((uint32_t)nIndex     ) & 0X000000FF) << 24)
        + ((((uint32_t)nStatus    ) & 0X000000FF) << 16)
        + ((((uint32_t)nDirection ) & 0X000000FF) <<  8)
        + ((((uint32_t)nRoundCount) & 0X000000FF) <<  0)
        ;
}} {}
  }
  Function {StartTest()} {return_type void
  } {
    code {{
    extern uint32_t    g_TestAnimationCode;
    extern MainWindow *g_MainWindow;
    g_MainWindow->EnableAnimation(true);
    
    for(int nIndex = 1; nIndex <= 5; ++nIndex){
        g_TestAnimationCode = GetTestActionSetCode(nIndex);
        uint32_t nStatus    = ((g_TestAnimationCode & 0X00FF0000) >> 16);
        uint32_t nDirection = ((g_TestAnimationCode & 0X0000FF00) >>  8);
        if(nStatus < 100){
            extern AnimationSet g_AnimationSet;
            g_AnimationSet.SetStatus(nStatus);
            g_AnimationSet.SetDirection(nDirection);
            return;
        }
    }
    g_TestAnimationCode = 0X00FFFFFF;
}} {}
  }
  Function {StopTest()} {return_type void
  } {
    code {{
    extern uint32_t    g_TestAnimationCode;
    extern MainWindow *g_MainWindow;
    g_MainWindow->EnableAnimation(false);
    g_TestAnimationCode &= 0X00FFFFFF;
}} {}
  }
} 
