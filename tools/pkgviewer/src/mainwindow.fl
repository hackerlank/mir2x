# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <string>} {private local
} 

decl {\#include <cstdint>} {private local
} 

decl {\#include <iostream>} {private local
} 

decl {\#include "wilimagepackage.hpp"} {private local
} 

decl {\#include "savepng.hpp"} {private local
} 

class MainWindow {open
} {
  Function {MainWindow()} {open
  } {
    Fl_Window m_Window {
      callback {/*
if(fl_ask("Quit?")){
    exit(0);
}
*/

exit(0);} open
      private xywh {395 91 555 605} type Double labelfont 4 hide
      code0 {\#include <FL/fl_ask.H>}
    } {
      Fl_Menu_Bar m_MenuBar {open
        private xywh {0 0 600 20} box FLAT_BOX labelfont 4 textfont 4
      } {
        Submenu {} {
          label File open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label Open
            callback {{
    extern PreviewWindow *g_PreviewWindow;
    delete g_PreviewWindow;
    g_PreviewWindow = nullptr;

    Fl_Native_File_Chooser fileChooser;
    extern std::string g_FileFullName;
    fileChooser.title("Select .WIL File");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_FILE);

    char matchedFileNames[] =
        "WIL\\t*.wil\\n"
        ;

    fileChooser.filter(matchedFileNames);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert("%s", fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
            	DeactivateAll();
                // TODO: NO ERROR CHECKING HERE
                g_FileFullName = fileChooser.filename();
                std::replace(g_FileFullName.begin(), g_FileFullName.end(), '\\\\', '/');

                std::string pathName, fileName, fileExt;
                auto posF = g_FileFullName.find_last_of('/');
                auto posD = g_FileFullName.find_last_of('.');

                pathName = g_FileFullName.substr(0, posF);
                fileName = g_FileFullName.substr(posF + 1, posD - posF - 1);
                fileExt  = g_FileFullName.substr(posD + 1);

                // std::replace(pathName.begin(), pathName.end(), '\\\\', '/');

                // std::cout << pathName << std::endl;
                // std::cout << fileName << std::endl;
                // std::cout << fileExt  << std::endl;

                extern WilImagePackage g_WilPackage;
                g_WilPackage.Load(pathName.c_str(), fileName.c_str(), fileExt.c_str());

                m_Browser->clear();
                int  maxLen = 0;
                auto nCnt   = g_WilPackage.IndexCount();
                for(auto nTmp = nCnt; nTmp > 0; nTmp /= 10){
                    maxLen++;
                }

                auto p = new ProgressBarWindow();
                p->SetValue(0);
                p->Redraw();
                p->ShowAll();
                Fl::check();

		
                std::string formatStr;
                formatStr = "Index: %0" + std::to_string(maxLen) + "d         W:%4d            H:%4d";
                for(int i = 0; i < g_WilPackage.IndexCount(); ++i){
                    int nNewPer = (int)(i * 100 / g_WilPackage.IndexCount());
                    p->SetValue(nNewPer);
                    p->Redraw();
                    p->ShowAll();
                    Fl::check();

                    g_WilPackage.SetIndex(i);
                    if(g_WilPackage.CurrentImageValid()){
                        char tmpBuf[128];
                        std::sprintf(tmpBuf, formatStr.c_str(), i, g_WilPackage.CurrentImageInfo().shWidth, g_WilPackage.CurrentImageInfo().shHeight);
                        // auto InfoBlk = g_WilPackage.CurrentImageInfo();
                        m_Browser->add(tmpBuf, (void *)((intptr_t)i));
                    }
                }
                p->HideAll();
                delete p;
                
                ActivateAll();

                break;
            }
    }
}}
            xywh {0 0 30 20} shortcut 0x4006f labelfont 4 divider
            code0 {\#include <FL/Fl_Native_File_Chooser.H>}
            code1 {\#include "progressbarwindow.hpp"}
            code2 {\#include "wilfilewindow.hpp"}
            code3 {\#include "previewwindow.hpp"}
          }
          MenuItem {} {
            label {Export Current}
            callback {{
    Fl_Native_File_Chooser fileChooser;
    fileChooser.title("Save");
    fileChooser.type(Fl_Native_File_Chooser::BROWSE_SAVE_DIRECTORY);
    fileChooser.directory(".");
    switch(fileChooser.show()){
        case -1:
            fl_alert("%s", fileChooser.errmsg());
            break;
        case  1:
            break;
        default:
            {
                extern WilImagePackage g_WilPackage;
                if(g_WilPackage.SetIndex(SelectedImageIndex())
                        && g_WilPackage.CurrentImageValid()){
                    auto nW = g_WilPackage.CurrentImageInfo().shWidth;
                    auto nH = g_WilPackage.CurrentImageInfo().shHeight;

                    auto  p = new uint32_t[nW * nH];
                    g_WilPackage.Decode(p, 0XFFFFFFFF, 0XFFFFFFFF, 0XFFFFFFFF);
                    char tmpIndex[16];
                    std::sprintf(tmpIndex, "%06d", SelectedImageIndex());
                    std::string tmpFilePathName = fileChooser.filename();
                    std::replace(tmpFilePathName.begin(), tmpFilePathName.end(), '\\\\', '/');
                    SaveRGBABufferToPNG((uint8_t *)p, nW, nH, (tmpFilePathName + "/" + tmpIndex + ".PNG").c_str());
                    delete p;
                }
            }
            break;
    }
}} selected
            xywh {0 0 30 20} shortcut 0x40078 labelfont 4
            code0 {\#include <cstdint>}
            code1 {\#include "wilimagepackage.hpp"}
          }
          MenuItem {} {
            label {Export All}
            callback {{
	Fl_Native_File_Chooser fileChooser;
	fileChooser.title("Save All");
	fileChooser.type(Fl_Native_File_Chooser::BROWSE_SAVE_DIRECTORY);
	fileChooser.directory(".");
	switch(fileChooser.show()){
		case -1:
			fl_alert("%s", fileChooser.errmsg());
			break;
        	case  1:
            		break;
        	default:
			{
				auto p = new ProgressBarWindow();
                		p->SetValue(0);
                		p->Redraw();
                		p->ShowAll();
                		Fl::check();
                
                		uint32_t *pBuffer    = nullptr;
                		size_t    nBufferLen = 0;
                		extern WilImagePackage g_WilPackage;
                
                		for(int i = 1; i <= m_Browser->size(); ++i){
                			int nNewPer = (int)(i * 100 / g_WilPackage.IndexCount());
                    			p->SetValue(nNewPer);
                    			p->Redraw();
                    			p->ShowAll();
                    			Fl::check(); // actually we don't need it
                    
                    			uint32_t imgIdx = (uint32_t)((intptr_t)(m_Browser->data(i)));
                    			g_WilPackage.SetIndex(imgIdx);
                    			if(g_WilPackage.CurrentImageValid()){
                        			auto nW = g_WilPackage.CurrentImageInfo().shWidth;
                        			auto nH = g_WilPackage.CurrentImageInfo().shHeight;

                        			if(nBufferLen < (size_t)(nW * nH)){
                            				delete pBuffer;
                            				pBuffer    = new uint32_t[nW * nH];
                            				nBufferLen = (size_t)(nW * nH);
                        			}

                        			g_WilPackage.Decode(pBuffer, 0XFFFFFFFF, 0XFFFFFFFF, 0XFFFFFFFF);
                        			char tmpIndex[16];
                        			std::sprintf(tmpIndex, "TMP%06d", imgIdx);
                        			std::string tmpFilePathName = fileChooser.filename();
                        			std::replace(tmpFilePathName.begin(), tmpFilePathName.end(), '\\\\', '/');
                        			SaveRGBABufferToPNG((uint8_t *)pBuffer, nW, nH, (tmpFilePathName + "/" + tmpIndex + ".PNG").c_str());
                    			}
                		}
                		delete pBuffer;
                
                		p->HideAll();
                		delete p;
            		}
            		break;
	}
}}
            xywh {10 10 30 20} shortcut 0x50078 labelfont 4 divider
            code0 {\#include "progressbarwindow.hpp"}
          }
          MenuItem {} {
            label Exit
            callback {exit(0);}
            xywh {0 0 30 20} shortcut 0x40071 labelfont 4
          }
        }
        Submenu {} {
          label About open
          xywh {0 0 62 20} labelfont 4
        } {
          MenuItem {} {
            label {About Me}
            callback {{
	static AboutWindow *p;
	if(!p){
		p = new AboutWindow();
	}
	p->ShowAll();
}}
            xywh {0 0 30 20} labelfont 4
            code0 {\#include "aboutwindow.hpp"}
          }
        }
      }
      Fl_Browser m_Browser {
        callback {extern PreviewWindow   *g_PreviewWindow;
extern MainWindow      *g_MainWindow;
extern WilImagePackage  g_WilPackage;

delete g_PreviewWindow;
g_PreviewWindow = nullptr;

g_WilPackage.SetIndex(g_MainWindow->SelectedImageIndex());
if(g_WilPackage.CurrentImageValid()){
	int W = g_WilPackage.CurrentImageInfo().shWidth;
	int H = g_WilPackage.CurrentImageInfo().shHeight;
	
	H = (std::max)(((std::min)(((int)(H * 1.5)), (int)(H + 40))), (int)200);
	W = (std::max)(((std::min)(((int)(W * 1.5)), (int)(W + 40))), (int)200);

	g_PreviewWindow = new PreviewWindow(W, H);
	g_PreviewWindow->show();
	g_PreviewWindow->redraw();
}}
        private xywh {0 20 555 585} type Hold labelfont 4 textfont 4
        code0 {\#include <algorithm>}
        code1 {\#include "wilimagepackage.hpp"}
        code2 {\#include <FL/fl_draw.H>}
        code3 {\#include "previewwindow.hpp"}
      }
    }
  }
  Function {ShowAll()} {return_type void
  } {
    code {m_Window->show();} {}
  }
  Function {SelectedImageIndex()} {return_type uint32_t
  } {
    code {for(int i = 1; i <= m_Browser->size(); ++i)
{
	if(m_Browser->selected(i)){
		return (uint32_t)((intptr_t)m_Browser->data(i));
	}
}

extern WilImagePackage g_WilPackage;
return g_WilPackage.ImageCount();} {}
  }
  Function {ActivateAll()} {open return_type void
  } {
    code {m_Window->activate();
m_MenuBar->activate();
m_Browser->activate();} {}
  }
  Function {DeactivateAll()} {open
  } {
    code {m_Window->deactivate();
m_MenuBar->deactivate();
m_Browser->deactivate();} {}
  }
} 
