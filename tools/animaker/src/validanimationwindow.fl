# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
use_FL_COMMAND 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <string>} {private local
} 

decl {\#include "filesys.hpp"} {private local
} 

decl {\#include "mathfunc.hpp"} {private local
} 

decl {\#include <algorithm>} {private local
} 

decl {\#include <FL/fl_ask.H>} {private local
} 

decl {\#include "animationpreviewwindow.hpp"} {private local
} 

class ValidAnimationWindow {open
} {
  decl {int m_AnimationCount;} {private local
  }
  decl {int m_FileIndex;} {private local
  }
  Function {ValidAnimationWindow()} {open
  } {
    code {m_FileIndex = 0;} {}
    code {m_AnimationCount = 0;} {}
    Fl_Window m_Window {
      callback {{
    extern AnimationPreviewWindow *g_AnimationPreviewWindow;
    delete g_AnimationPreviewWindow; g_AnimationPreviewWindow = nullptr;
    m_Window->hide();
    extern ValidWilFileWindow *g_ValidWilFileWindow;
    g_ValidWilFileWindow->ShowAll();
}} open
      private xywh {323 90 301 401} type Double labelfont 4 resizable
      code0 {\#include "validwilfilewindow.hpp"}
      code1 {\#include "animationpreviewwindow.hpp"} visible
    } {
      Fl_Browser m_ValidAnimationBrowser {
        callback {{
    if(!Fl::event_clicks()){
        return;
    }
    
    for(int i = 1; i <= m_ValidAnimationBrowser->size(); ++i){
        if(m_ValidAnimationBrowser->selected(i)){
            extern AnimationPreviewWindow *g_AnimationPreviewWindow;
            delete g_AnimationPreviewWindow;
            g_AnimationPreviewWindow = new AnimationPreviewWindow(m_FileIndex, (int)(uintptr_t)m_ValidAnimationBrowser->data(i));
            g_AnimationPreviewWindow->ShowAll();
            return;
        }
    }
}} selected
        private xywh {0 0 300 400} type Hold labelfont 4 textfont 4 resizable
        code0 {\#include <cstdio>}
        code1 {\#include "animationpreviewwindow.hpp"}
        code2 {\#include <FL/Fl.H>}
      }
    }
  }
  Function {~ValidAnimationWindow()} {} {
    code {delete m_Window;} {}
  }
  Function {ShowAll()} {return_type void
  } {
    code {{
	m_Window->show();
}} {}
  }
  Function {CheckValidAnimation(int nMaxIndex)} {open return_type void
  } {
    code {{
    m_ValidAnimationBrowser->clear();
    
    m_AnimationCount = nMaxIndex / 1000 + 1;
    for(int i = 0; i < m_AnimationCount; ++i){
        m_ValidAnimationBrowser->add((std::string("Animation ") + std::to_string(i)).c_str(), (void *)(uintptr_t)i);
    }
}} {}
  }
  Function {SetFileIndex(int nFileIndex)} {return_type void
  } {
    code {{
    m_FileIndex = nFileIndex;
}} {}
  }
  Function {AnimationCount()} {return_type int
  } {
    code {{
    return m_AnimationCount;
}} {}
  }
} 
