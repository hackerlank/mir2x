# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.hpp} 
code_name {.cpp}
decl {\#include <cstdio>} {private local
} 

class AnimationInfoWindow {open
} {
  decl {Fl_Text_Buffer *m_Buffer;} {private local
  }
  Function {AnimationInfoWindow()} {open
  } {
    code {m_Buffer = new Fl_Text_Buffer();} {}
    Fl_Window m_Window {open
      xywh {230 165 451 350} type Double labelfont 4 visible
    } {
      Fl_Text_Display m_Display {
        xywh {0 0 450 300} labelfont 4 textfont 4
      }
      Fl_Button {} {
        label Import
        callback {{
    extern AnimationSet g_AnimationSet;
    extern MainWindow *g_MainWindow;
    m_Window->hide();
    g_MainWindow->LoadAnimationSet();
    g_MainWindow->RedrawAll();

    Fl::remove_timeout(AnimationSet::TimeoutCallback);
    Fl::add_timeout(0.2, AnimationSet::TimeoutCallback, &g_AnimationSet);
    g_MainWindow->AddStatusItem();
    g_MainWindow->ShowAll();
}} selected
        xywh {255 318 64 25} labelfont 4
        code0 {\#include "mainwindow.hpp"}
        code1 {\#include "animationset.hpp"}
      }
      Fl_Button {} {
        label Drop
        callback {{
    extern AnimationSet g_AnimationSet;
    g_AnimationSet.Clear();
    extern AnimationPreviewWindow *g_AnimationPreviewWindow;
    g_AnimationPreviewWindow->ShowAll();
    m_Window->hide();
}}
        xywh {349 318 64 25} labelfont 4
        code0 {\#include "animationpreviewwindow.hpp"}
        code1 {\#include "animationset.hpp"}
      }
    }
    code {m_Display->buffer(m_Buffer);
Set(12);} {}
  }
  Function {~AnimationInfoWindow()} {} {
    code {{
    delete m_Window; m_Window = nullptr;
}} {}
  }
  Function {Set(int nCount)} {return_type void
  } {
    code {char szInfo[512];

std::sprintf(szInfo, 
    "hello!\\n"
    "count = %d\\n",
    nCount
);

m_Buffer->text(szInfo);} {}
  }
  Function {ShowAll()} {return_type void
  } {
    code {{
	m_Window->show();
}} {}
  }
  Function {RedrawAll()} {return_type void
  } {
    code {{
	m_Window->redraw();
}} {}
  }
  Function {TimeoutCallback()} {open return_type {static void}
  } {
    code {{

}} {}
  }
} 
